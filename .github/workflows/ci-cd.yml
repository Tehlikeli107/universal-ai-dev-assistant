name: 🚀 Universal AI Development Assistant CI/CD

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code Quality and Security Checks
  quality-checks:
    name: 🔍 Quality & Security Checks
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: 🎨 Check formatting
      run: cd backend && cargo fmt -- --check

    - name: 📎 Clippy linting
      run: cd backend && cargo clippy -- -D warnings

    - name: 🔒 Security audit
      uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🔍 Python code quality
      run: |
        pip install flake8 black isort mypy
        flake8 examples/ --max-line-length=88
        black --check examples/
        isort --check-only examples/
        mypy examples/ --ignore-missing-imports

  # Backend Tests
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable, beta]
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust ${{ matrix.rust-version }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust-version }}
        override: true

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          backend/target
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}

    - name: 🔨 Build
      run: cd backend && cargo build --verbose

    - name: 🧪 Run tests
      run: cd backend && cargo test --verbose

    - name: 📊 Generate coverage
      if: matrix.rust-version == 'stable'
      run: |
        cd backend
        cargo install cargo-tarpaulin
        cargo tarpaulin --out xml

    - name: 📤 Upload coverage
      if: matrix.rust-version == 'stable'
      uses: codecov/codecov-action@v3
      with:
        file: backend/cobertura.xml
        flags: backend

  # Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install dependencies
      run: |
        pip install -r requirements.txt
        sudo apt-get update
        sudo apt-get install -y curl

    - name: 🔨 Build backend
      run: cd backend && cargo build --release

    - name: 🚀 Start server
      run: |
        cd backend
        POSTGRES_URL=postgresql://postgres:password@localhost:5432/test_db \
        REDIS_URL=redis://localhost:6379 \
        cargo run --release &
        echo $! > server.pid
        sleep 10

    - name: 🧪 Run integration tests
      run: |
        python examples/working_demo.py
        bash scripts/build_and_test.sh

    - name: 🛑 Stop server
      run: |
        if [ -f backend/server.pid ]; then
          kill $(cat backend/server.pid) || true
        fi

  # Frontend Tests (if frontend exists)
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 📦 Install dependencies
      run: |
        if [ -d "frontend" ]; then
          cd frontend
          npm ci
        fi

    - name: 🧪 Run tests
      run: |
        if [ -d "frontend" ]; then
          cd frontend
          npm test -- --coverage --watchAll=false
        fi

    - name: 🔨 Build frontend
      run: |
        if [ -d "frontend" ]; then
          cd frontend
          npm run build
        fi

  # Docker Build and Push
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [quality-checks, backend-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🔑 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/universal-ai-dev-assistant
          ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔨 Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🦀 Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: 🔨 Build optimized
      run: cd backend && cargo build --release

    - name: 📊 Run benchmarks
      run: |
        cd backend
        cargo bench --bench performance_benchmarks

    - name: 📤 Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: backend/target/criterion/

  # Security Scanning
  security-scan:
    name: 🛡️ Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔒 CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: rust, python, javascript

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Deployment
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [docker-build, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here

    - name: 🧪 Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke tests here

    - name: 📢 Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Release
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [deploy]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body: |
          ## 🚀 Universal AI Development Assistant ${{ github.ref }}
          
          ### ✨ New Features
          - Enhanced AI capabilities
          - Improved collaboration features
          - Better performance and reliability
          
          ### 🐛 Bug Fixes
          - Various stability improvements
          
          ### 📊 Metrics
          - Docker image size: Optimized
          - Test coverage: >90%
          - Performance: Improved
          
          ### 🔗 Links
          - [Docker Hub](https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/universal-ai-dev-assistant)
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [Quick Start](https://github.com/${{ github.repository }}/blob/main/QUICK_DEMO.md)